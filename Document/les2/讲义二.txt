1.大家好，这次给大家的课程是 游戏开发中的常用的设计模式。
这门课我分成两部分 第一部分 什么是设计模式，我们为什么要用设计模式和设计原则
第二部分讲解常用的设计模式有那些。

2. 首先先讲一个小段子

这个软件开发中其实非常典型的，需求的改变的会冲击整个系统。
软件工程的复杂的根本原因 变化！ 重点说变化， 客户需求的变化，技术平台变化，开发团队，市场变化 都会冲击我们已有的设计。

如何解决变化的复杂性呢？
分解
C语言 或者Pascal 语言 面向过程语言，他们解决的方式，分解。把复杂的问题，分解成小的问题的

但是有时候分解是不够的
抽象。。。

抽象刚刚可能对于抽象这个词理解不够深入，但是随着课程深入大家对于抽象的理解越来越深入。我们后面的课程都是围绕的抽象这个进行的。

3“每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心
。这样，你就能一次又一次地使用该方案而不必做重复劳动”

首先是 第一关键字 不断重复， 这样的问题可能经常出现，第二叫关键字叫 解决方案。 用这个方案可以解决。第三个 不必重复劳动！ 软件行业就叫不要重新发明轮子。我们的目标是什么
设计模式的目标就是 可复用。说白了 就懒。
设计模式 里面有一本书叫 就是GOF的 设计模式。大家有空可以好好去读下！非常经典的一本书。

复用！记住复用能复用的设计才是好设计
4 NO BB，Show Me Code

我们现在写一种写法，我们

这算一种分解的思维模式

我再写第二种写法

。

这两种都写完了。现在策划说。我添加一个画圆的，如果第一种写法的话。
那么我得添加Circle类，再到MainForm类里面。我添加Circle的队列，消息的地方再添加。
最后

如果第二种写法的呢，我一样的也得写个circle类，这边还是得override Draw函数

Mainform里面，我们只要修改的 添加的部分代码。看到没有第二种写法里面，这边不需要改，只要一个地方。如果后面我们用了工厂模式 这边也不需要改的

第二设计方法，由于需求的变更，他的代码改变的。用软件术语来说。就是代码的复用性的非常高，第一种写法的不好的地方，要到处改起来。
我们这个事例只是非常小的，如果真的是个非常复杂的功能，那么改动的地方就多了。我们就得忙疯了，而且容易改出bug。第二种也不会没改，只是它改的非常小。

通过这个事例，我们的设计模式主要讲什么呢？ 复用性，如何判断软件设计是好的，里面有个最简单的判断的方法，复用性，复用性好的设计是好的设计的。


我们继续讨论面向对象设计的原则：
通过前面事例的学习，我们知道变化是我们设计最大的挑战，变化是复用最大天敌。我们用设计模式说，不是就说变化就没有了。
我们用设计模式，是把变化改变的带来的冲击减少到最小。
大家设计模式书籍上有23种，大家有个错误理念，把学习设计模式跟学习算法一样死记硬背，生搬硬套。我们学习设计模式不是学习代码是为了学习他的一些理念。
这里我们要讲述是设计里面的一些原则，我自己觉得设计原则比设计模式更加重要，有这些原则，有可能我们可以设计一些新的模式。也能学习以后发明很多设计模式。
后面所有的设计模式都是依赖设计原则，如果后面某种设计模式违背设计原则，那么这个模式就是错误的。
但是我们学习设计模式其实我们要学习设计原则理念。

这边我列举了设计模式的8大的原则

依赖倒置

依赖倒置讲的是什么，第一句是什么

第二句话

这话怎么理解呢？我们回到刚刚的代码里，我们看下刚刚的代码，

第一个例子 MainForm 依赖的 Line Rect，其实这个不太好。我们Line Rect是变化的，MainForm是相对的。我们把稳定依赖变化，那么稳定也变的不稳定了。
那么再看下 MainForm 

抽象不应该依赖细节，有些在抽象接口调用细节的。
通过这个方式 我们就隔离了变化了。

依赖倒置式非常重要的原则，他基本贯穿了所有的设计模式。

开闭原则
举个例子 比如我们现在有个需求，桌椅板凳，把需求提给工厂，他们根据我们需求做了一些工作。到了中间。我们发现需求要变了，现在要把新需求提交给工厂，比如要增加防火。

那么工厂咋办 有两种办法 第一种办法，砍了。之前做的全部了 重做。这种就叫改变做法，
第二种做法，聪明工厂，它只是在只是在表面涂一层防火层。拓展

我回到刚刚Mainform的代码，我们第一种做法，碰到新需求，我们就在MainForm里面到处改。

而第二种做法呢
增加 我们只是增加一个新代码，如果以后大家碰到新问题，第一的想法不是去修改它，而想着去拓展它满足需求。


单一职责
责任的说是我经常提到的，我们有时候写代码发现类很臃肿 一个类写非常大，一个类 70 80 个方式，自然就会感觉不正常。这个感觉来自，因为这个包含了太多的职责，
包含太多不同的职责，就会把你类的设计往不同的方向拉扯。比如你有子类的时候，都不知道父类到底是干嘛用的，你都不知道该不该继承它，因为它包含了太多职责。

替换原则

如果我是你的子类，所以用到父类的地方。我都应该可以传过去，这不是天经地义吗？在具体实现的时候有些就会打破这个原则，举例子来说，有些程序员喜欢继承里面子类，啪啪啪写了一大堆。
你就会发现在子类里面有些方法是不能用的了，一用就抛出异常的。这就是违背了 里式替换原则。其实这时候你就得想，这个子类是否要继承这个父类或者压根就没关系。或者这两者之间是个组合关系。而不是继承关系。

接口隔离原则
不应该强迫客户程序依赖它们不用的方法，这个原则有另一个说。
小的意思，就是不要把不用的方法public出去，如果是子类使用的话就protect，如果就本类使用的话 就private的。如果真的有必要暴露出去，你才做成public，如果无节制public出去，就会跟客户产生依赖，一旦产生太多的依赖，、
因为你是接口 你就得保持稳定，如果碰到需求更改就会 引起用户的更改

优先
 很多奇怪很喜欢用

封装变化点，
当大家设计有经验的时候，在软件开发中，就很容易梳理出一个分界层，封装

针对接口编程，
不要太绝对，string int 类型

面向接口设计



